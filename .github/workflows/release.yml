name: Release Packages

on:
  push:
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true


jobs:
  Build_and_upload:
    name: Build releases
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: macos
            os: macos-12
            flutter_version: '3.7'
            flutter_channel: 'stable'
            artifact_name: release-mac
            artifact_path: build/macos/*.zip
#          - target: windows
#            os: windows-latest
#            flutter_version: '3.7'
#            flutter_channel: 'stable'
#            artifact_name: release-windows
#            artifact_path: build/windows/*.zip


    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Cache Pods (build macos)
        uses: actions/cache@v3
        if: matrix.target == 'macos'
        with:
          path: |
            macos/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('macos/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      # git-crypt unlock
#      - name: Unlock secrets (MacOS)
#        if: matrix.os == 'macos-12'
#        run: |
#          brew install git-crypt
#          echo $GIT_CRYPT_KEY | base64 -d -o grypt.key
#          git-crypt unlock grypt.key
#        env:
#          GIT_CRYPT_KEY: ${{ secrets.ENCODED_GIT_CRYPT }}
#
#      - name: Unlock secrets (Windows)
#        if: matrix.os == 'windows-latest'
#        run: |
#          Invoke-WebRequest -Uri https://github.com/AGWA/git-crypt/releases/download/0.7.0/git-crypt-0.7.0-x86_64.exe -OutFile git-crypt.exe
#          echo "${{ secrets.ENCODED_GIT_CRYPT }}" | openssl base64 -d -out git-crypt.key
#          .\git-crypt.exe unlock .\git-crypt.key

      # 安装证书
      - name: Install Apple Certificate
        if: matrix.os == 'macos-12'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}

      # 安装描述文件
      - name: Install the provisioning profile
        if: matrix.os == 'macos-12'
        env:
          PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          
          echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output $PP_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # 安装 Flutter
      - name: Flutter action
        uses: subosito/flutter-action@v2
        with:
         flutter-version: ${{ matrix.flutter_version }}
         channel: ${{ matrix.flutter_channel }}

      - name: Build resolve Swift dependencies
        if: matrix.os == 'macos-12'
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release

      - name: Flutter pub get
        run: |
          git config --global core.longpaths true
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter pub run intl_utils:generate
      # Get app version
      - name: Get app version
        id: get_version
        shell: bash
        run: |
          echo "::set-output name=version::$(head -n 5 pubspec.yaml | tail -n 1 | cut -d ' ' -f 2)"

      # 打包 mac
      - name: Build mac app
        if: matrix.target == 'macos'
        run: |
          cd macos && pod update && pod install && cd ..
          flutter build macos --release
          APP_PATH=build/macos/Build/Products/Release/lyrics.app
          cp -a $APP_PATH ./build
          cd build && zip -qroy macos/lyrics_${{ steps.get_version.outputs.version }}_macos.zip lyrics.app
      - name: Build windows
        if: matrix.target == 'windows'
        run: |
          flutter build windows --release
          $DestDir = "build\windows\FEhViewer"
          $SrcDir = "build\windows\runner\Release"
          New-Item -Path $DestDir -ItemType Directory
          Copy-Item $SrcDir\* -Recurse $DestDir
          Copy-Item -Filter *.dll -Path windows\* -Destination $DestDir -Force
          Compress-Archive $DestDir build\windows\FEhViewer_${{ steps.get_version.outputs.version }}_windows.zip

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}

  Publish_releases:
    name: Publish releases
    needs: Build_and_upload
    runs-on: ubuntu-latest
    steps:
      - name: Download all Artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      - run: ls -R /tmp/artifacts

      - name: Upload to release
        uses: ncipollo/release-action@v1.5.0
        with:
#          artifacts: "/tmp/artifacts/release-mac/*.zip,/tmp/artifacts/release-windows/*.zip"
          artifacts: "/tmp/artifacts/release-mac/*.zip"
#          token: ${{ secrets.RELEASE_TOKEN }}
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true